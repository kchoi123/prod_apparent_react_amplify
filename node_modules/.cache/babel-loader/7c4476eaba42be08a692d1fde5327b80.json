{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\kevin\\\\Documents\\\\UCB_bootcamp\\\\Homework\\\\APParent\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\kevin\\\\Documents\\\\UCB_bootcamp\\\\Homework\\\\APParent\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\kevin\\\\Documents\\\\UCB_bootcamp\\\\Homework\\\\APParent\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\kevin\\\\Documents\\\\UCB_bootcamp\\\\Homework\\\\APParent\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\kevin\\\\Documents\\\\UCB_bootcamp\\\\Homework\\\\APParent\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\kevin\\\\Documents\\\\UCB_bootcamp\\\\Homework\\\\APParent\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\kevin\\\\Documents\\\\UCB_bootcamp\\\\Homework\\\\APParent\\\\client\\\\src\\\\components\\\\signUp-Form\\\\index.js\";\n// import all the dependencies\nimport React, { Component } from \"react\";\nimport { FormAction, FormLabel, FormButton, FormMessage, Dropdown, OptionForDropdown } from \"../form\";\nimport AddSchool from \"../add-school\";\nimport ErrorMessage from \"../errorMessage\";\nimport \"./style.css\";\nimport API from \"../../utils/API\";\nimport gradeLevel from \"../../gradeLevel.json\";\nvar statesList = [\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"Florida\", \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"]; // define a class SignUp to create the component\n\nvar SignUp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SignUp, _Component);\n\n  function SignUp() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SignUp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SignUp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      allUsernames: [],\n      allEmails: [],\n      firstStepRegistration: true,\n      parentInfo: [{\n        for: \"userName\",\n        label: \"Enter a username\",\n        placeholder: \"username\",\n        value: \"\"\n      }, {\n        for: \"password\",\n        label: \"Enter your password (at least 8 characters)\",\n        placeholder: \"password\",\n        value: \"\"\n      }, {\n        for: \"email\",\n        label: \"Enter your email\",\n        placeholder: \"example@email.com\",\n        value: \"\"\n      }, {\n        for: \"photo\",\n        label: \"Enter a link for your profile picture\",\n        placeholder: \"https://www.picture-of-me.png\",\n        value: \"\"\n      }, {\n        for: \"city\",\n        label: \"Which city do you live in?\",\n        placeholder: \"city\",\n        value: \"\"\n      }, {\n        for: \"state\",\n        label: \"Which state do you live in?\",\n        value: \"Alabama\",\n        options: statesList\n      }],\n      kidInfo: [{\n        for: \"name\",\n        label: \"Enter the name of your kid\",\n        placeholder: \"kid's name\",\n        value: \"\"\n      }, {\n        for: \"grade\",\n        label: \"Which grade is your kid in?\",\n        value: \"1\",\n        options: gradeLevel\n      }, {\n        for: \"school\",\n        label: \"Which school does your kid go to?\",\n        value: \"1\",\n        options: []\n      }],\n      numberOfKid: 1,\n      allKidsInfo: [],\n      formMessage: {\n        message: \"Already Have An Account?\",\n        action: \"Login\",\n        alt: \"login\"\n      },\n      hasError: false,\n      passwordTooShort: false,\n      usernameAlreadyExists: false,\n      emailAlreadyExists: false,\n      addKid: false,\n      addSchool: false,\n      messageSchoolAdded: false\n    };\n\n    _this.updateSchoolList = function () {\n      API.getAllSchools().then(function (res) {\n        console.log(res.data);\n\n        var copy = _toConsumableArray(_this.state.kidInfo);\n\n        copy[2].options = res.data;\n\n        _this.setState({\n          kidInfo: copy,\n          addSchool: false,\n          messageSchoolAdded: true\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.handleInputChangeParent = function (event) {\n      var value = event.target.value;\n      var key = event.target.getAttribute(\"data-id\");\n\n      var copy = _toConsumableArray(_this.state.parentInfo);\n\n      copy[key].value = value;\n\n      _this.setState({\n        parentInfo: copy\n      });\n    };\n\n    _this.handleContinueButtonClick = function (event) {\n      event.preventDefault(); // if all the fields have been filled up\n\n      if (_this.state.parentInfo[0].value && _this.state.parentInfo[1].value && _this.state.parentInfo[2].value && _this.state.parentInfo[3].value && _this.state.parentInfo[4].value && _this.state.parentInfo[5].value) {\n        // if username doesn't already exist in the database\n        if (_this.state.allUsernames.indexOf(_this.state.parentInfo[0].value) === -1) {\n          // if the email doesn't already exist in the database\n          if (_this.state.allEmails.indexOf(_this.state.parentInfo[2].value) === -1) {\n            // display the second part of the form\n            _this.setState({\n              firstStepRegistration: false\n            });\n\n            console.log(\"parent info: \", _this.state.parentInfo); // if password isn't too short\n\n            if (_this.state.parentInfo[1].value.length >= 8) {\n              // display the second part of the form\n              _this.setState({\n                firstStepRegistration: false\n              });\n\n              console.log(\"parent info: \", _this.state.parentInfo); // if password too short\n            } else {\n              // display error message\n              _this.setState({\n                passwordTooShort: true\n              });\n            } // if the email is already present in the database\n\n          } else {\n            _this.setState({\n              emailAlreadyExists: true\n            });\n          } // if username is already present in the database\n\n        } else {\n          // display error message\n          _this.setState({\n            usernameAlreadyExists: true\n          });\n        } // if all the fields haven't been filled up\n\n      } else {\n        // display error message\n        _this.setState({\n          hasError: true\n        });\n      }\n    };\n\n    _this.handleInputChangeKid = function (event) {\n      var value = event.target.value;\n      var key = event.target.getAttribute(\"data-id\");\n\n      var copy = _toConsumableArray(_this.state.kidInfo);\n\n      copy[key].value = value;\n\n      _this.setState({\n        kidInfo: copy\n      });\n    };\n\n    _this.handleAddKidButtonClick = function (event) {\n      event.preventDefault(); // if the parent clicks the \"add kid\" button after entering info for the first kid, it will proceed\n\n      if (_this.state.kidInfo[0].value && _this.state.kidInfo[1].value && _this.state.kidInfo[2].value) {\n        // copy the kidInfo\n        var copyKid = _toConsumableArray(_this.state.kidInfo); // store the current kidInfo into the allKidInfo variable\n\n\n        _this.state.allKidsInfo.push({\n          name: copyKid[0].value,\n          grade: copyKid[1].value,\n          schoolId: copyKid[2].value\n        }); // clear the fields for kid form\n\n\n        copyKid[0].value = \"\";\n        copyKid[1].value = \"1\";\n        copyKid[2].value = \"1\"; // update kidInfo to get empty fields in form, add 1 kid to the counter and \n        // display new registration form for the other kid\n\n        _this.setState({\n          kidInfo: copyKid,\n          numberOfKid: _this.state.numberOfKid + 1,\n          addKid: true,\n          messageSchoolAdded: false\n        }); // otherwise will get error message that the parent has to fill up the fields\n\n      } else {\n        _this.setState({\n          hasError: true\n        });\n      }\n    };\n\n    _this.handleSignUpButtonClick = function (event) {\n      event.preventDefault(); // if the parent signs up without adding another kid or after adding a the last kid - grab the only (or last) kidInfo here\n\n      var copyKid = _toConsumableArray(_this.state.kidInfo);\n\n      _this.state.allKidsInfo.push({\n        name: copyKid[0].value,\n        grade: copyKid[1].value,\n        schoolId: copyKid[2].value\n      }); // console log for checking\n\n\n      console.log(\"all kid info: \", _this.state.allKidsInfo); // the parent has to enter info in every field to be able to submit form\n\n      if (_this.state.kidInfo[0].value && _this.state.kidInfo[1].value && _this.state.kidInfo[2].value) {\n        API.signup({\n          userName: _this.state.parentInfo[0].value,\n          password: _this.state.parentInfo[1].value,\n          email: _this.state.parentInfo[2].value,\n          photoLink: _this.state.parentInfo[3].value,\n          city: _this.state.parentInfo[4].value,\n          state: _this.state.parentInfo[5].value,\n          allKidsInfo: _this.state.allKidsInfo\n        }).then(function (res) {\n          window.location.reload();\n        }).catch(function (err) {\n          return console.log(err);\n        }); // otherwise will get error message that the parent has to fill up the fields\n      } else {\n        _this.setState({\n          hasError: true\n        });\n      }\n    };\n\n    _this.handleAddSchoolOption = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        addSchool: true,\n        messageSchoolAdded: false\n      });\n    };\n\n    _this.handleCloseButtonClick = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        hasError: false,\n        passwordTooShort: false,\n        usernameAlreadyExists: false,\n        emailAlreadyExists: false\n      });\n    };\n\n    _this.resetError = function () {\n      if (_this.state.hasError || _this.state.passwordTooShort || _this.state.usernameAlreadyExists || _this.state.emailAlreadyExists) {\n        setTimeout(function () {\n          _this.setState({\n            hasError: false,\n            passwordTooShort: false,\n            usernameAlreadyExists: false,\n            emailAlreadyExists: false\n          });\n        }, 2000);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SignUp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // retrieves all the schools\n      API.getAllSchools().then(function (res) {\n        console.log(res.data);\n\n        var copy = _toConsumableArray(_this2.state.kidInfo);\n\n        copy[2].options = res.data;\n\n        _this2.setState({\n          kidInfo: copy\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      }); // get the info of the parents already in the database - to check username and email\n\n      API.searchAllParentsInDB().then(function (res) {\n        console.log(res.data); // push into an array all the usernames and emails already in the database\n\n        for (var i = 0; i < res.data.length; i++) {\n          _this2.state.allUsernames.push(res.data[i].userName);\n\n          _this2.state.allEmails.push(res.data[i].email);\n        }\n\n        console.log(_this2.state.allUsernames);\n        console.log(_this2.state.allEmails);\n      });\n    } // function to update the school list once/if a parent has created one\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      this.resetError();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, this.state.firstStepRegistration ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, this.state.hasError ? React.createElement(ErrorMessage, {\n        message: \"Please fill up all the fields!\",\n        handleCloseButtonClick: this.handleCloseButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }) : \"\", this.state.passwordTooShort ? React.createElement(ErrorMessage, {\n        message: \"Your password should be at least 8 characters long!\",\n        handleCloseButtonClick: this.handleCloseButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }) : \"\", this.state.usernameAlreadyExists ? React.createElement(ErrorMessage, {\n        message: \"Sorry, this username is already taken!\",\n        handleCloseButtonClick: this.handleCloseButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }) : \"\", this.state.emailAlreadyExists ? React.createElement(ErrorMessage, {\n        message: \"Sorry, a parent already registered with this email!\",\n        handleCloseButtonClick: this.handleCloseButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }) : \"\", React.createElement(FormAction, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, this.state.parentInfo.map(function (parentInfo, i) {\n        if (parentInfo.for !== \"state\") {\n          return React.createElement(FormLabel, {\n            key: i,\n            data: i,\n            for: parentInfo.for,\n            label: parentInfo.label,\n            placeholder: parentInfo.placeholder,\n            value: parentInfo.value,\n            handleChange: _this3.handleInputChangeParent,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 372\n            },\n            __self: this\n          });\n        } else {\n          return React.createElement(Dropdown, {\n            key: i,\n            data: i,\n            for: parentInfo.for,\n            label: parentInfo.label,\n            value: parentInfo.value,\n            handleChange: _this3.handleInputChangeParent,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 384\n            },\n            __self: this\n          }, parentInfo.options.map(function (state, j) {\n            return React.createElement(OptionForDropdown, {\n              option: state,\n              value: state,\n              key: j,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 394\n              },\n              __self: this\n            });\n          }));\n        }\n      })), React.createElement(FormButton, {\n        nameButton: \"Continue\",\n        handleButtonClick: this.handleContinueButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }, this.state.hasError ? React.createElement(ErrorMessage, {\n        message: \"Please fill up all the fields!\",\n        handleCloseButtonClick: this.handleCloseButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }) : \"\", React.createElement(FormAction, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, !this.state.addKid ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"font-weight-bold mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420\n        },\n        __self: this\n      }, \"Enter information for kid #1\"), this.state.kidInfo.map(function (info, i) {\n        if (info.for === \"name\") {\n          return React.createElement(FormLabel, {\n            key: i,\n            data: i,\n            for: info.for,\n            label: info.label,\n            value: info.value,\n            handleChange: _this3.handleInputChangeKid,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 424\n            },\n            __self: this\n          });\n        } else {\n          return React.createElement(Dropdown, {\n            key: i,\n            data: i,\n            for: info.for,\n            label: info.label,\n            value: info.value,\n            disabled: _this3.state.disabled,\n            handleChange: _this3.handleInputChangeKid,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 435\n            },\n            __self: this\n          }, info.options.map(function (item, j) {\n            return React.createElement(OptionForDropdown, {\n              option: item.name,\n              value: item.id,\n              key: j,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 446\n              },\n              __self: this\n            });\n          }));\n        }\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"font-weight-bold text-success mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460\n        },\n        __self: this\n      }, \"Information saved for kid #\", this.state.numberOfKid - 1), React.createElement(\"div\", {\n        className: \"font-weight-bold mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461\n        },\n        __self: this\n      }, \" Enter information for kid #\", this.state.numberOfKid), this.state.kidInfo.map(function (info, i) {\n        if (info.for === \"name\") {\n          return React.createElement(FormLabel, {\n            key: i,\n            data: i,\n            for: info.for,\n            label: info.label,\n            value: info.value,\n            handleChange: _this3.handleInputChangeKid,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 465\n            },\n            __self: this\n          });\n        } else {\n          return React.createElement(Dropdown, {\n            key: i,\n            data: i,\n            for: info.for,\n            label: info.label,\n            value: info.value,\n            disabled: _this3.state.disabled,\n            handleChange: _this3.handleInputChangeKid,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 476\n            },\n            __self: this\n          }, info.options.map(function (item, j) {\n            return React.createElement(OptionForDropdown, {\n              option: item.name,\n              value: item.id,\n              key: j,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 487\n              },\n              __self: this\n            });\n          }));\n        }\n      })), this.state.messageSchoolAdded ? React.createElement(\"p\", {\n        className: \"font-weight-bold text-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501\n        },\n        __self: this\n      }, \"Your school has been added to the dropdown menu!\") : \"\", React.createElement(\"button\", {\n        className: \"mb-2 font-weight-bold p-0\",\n        onClick: this.handleAddSchoolOption,\n        style: {\n          border: \"none\",\n          background: \"none\",\n          color: \"orange\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        },\n        __self: this\n      }, \"Didn't find your school? Click here to add it!\"), this.state.addSchool ? React.createElement(AddSchool, {\n        toUpdateSchoolList: this.updateSchoolList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507\n        },\n        __self: this\n      }) : \"\"), React.createElement(\"hr\", {\n        style: {\n          border: \"1px solid #176d88\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514\n        },\n        __self: this\n      }), React.createElement(FormButton, {\n        nameButton: \"I have another kid!\",\n        handleButtonClick: this.handleAddKidButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515\n        },\n        __self: this\n      }), React.createElement(FormButton, {\n        nameButton: \"Sign Up\",\n        handleButtonClick: this.handleSignUpButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      })), React.createElement(FormMessage, {\n        message: this.state.formMessage.message,\n        path: this.props.path,\n        action: this.state.formMessage.action,\n        id: this.state.formMessage.alt,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SignUp;\n}(Component); // export the component so it can be used by other files\n\n\nexport default SignUp;","map":{"version":3,"sources":["C:\\Users\\kevin\\Documents\\UCB_bootcamp\\Homework\\APParent\\client\\src\\components\\signUp-Form\\index.js"],"names":["React","Component","FormAction","FormLabel","FormButton","FormMessage","Dropdown","OptionForDropdown","AddSchool","ErrorMessage","API","gradeLevel","statesList","SignUp","state","allUsernames","allEmails","firstStepRegistration","parentInfo","for","label","placeholder","value","options","kidInfo","numberOfKid","allKidsInfo","formMessage","message","action","alt","hasError","passwordTooShort","usernameAlreadyExists","emailAlreadyExists","addKid","addSchool","messageSchoolAdded","updateSchoolList","getAllSchools","then","res","console","log","data","copy","setState","catch","err","handleInputChangeParent","event","target","key","getAttribute","handleContinueButtonClick","preventDefault","indexOf","length","handleInputChangeKid","handleAddKidButtonClick","copyKid","push","name","grade","schoolId","handleSignUpButtonClick","signup","userName","password","email","photoLink","city","window","location","reload","handleAddSchoolOption","handleCloseButtonClick","resetError","setTimeout","searchAllParentsInDB","i","map","j","info","disabled","item","id","border","background","color","props","path"],"mappings":"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","sourcesContent":["// import all the dependencies\nimport React, { Component } from \"react\";\nimport { FormAction, FormLabel, FormButton, FormMessage, Dropdown, OptionForDropdown } from \"../form\";\nimport AddSchool from \"../add-school\";\nimport ErrorMessage from \"../errorMessage\";\nimport \"./style.css\";\nimport API from \"../../utils/API\";\nimport gradeLevel from \"../../gradeLevel.json\";\n\nconst statesList = [\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"];\n\n// define a class SignUp to create the component\nclass SignUp extends Component {\n\n    state = {\n        allUsernames: [],\n        allEmails: [],\n        firstStepRegistration: true,\n        parentInfo:\n            [\n                {\n                    for: \"userName\",\n                    label: \"Enter a username\",\n                    placeholder: \"username\",\n                    value: \"\"\n                },\n                {\n                    for: \"password\",\n                    label: \"Enter your password (at least 8 characters)\",\n                    placeholder: \"password\",\n                    value: \"\"\n                },\n                {\n                    for: \"email\",\n                    label: \"Enter your email\",\n                    placeholder: \"example@email.com\",\n                    value: \"\"\n                },\n                {\n                    for: \"photo\",\n                    label: \"Enter a link for your profile picture\",\n                    placeholder: \"https://www.picture-of-me.png\",\n                    value: \"\"\n                },\n                {\n                    for: \"city\",\n                    label: \"Which city do you live in?\",\n                    placeholder: \"city\",\n                    value: \"\",\n                },\n                {\n                    for: \"state\",\n                    label: \"Which state do you live in?\",\n                    value: \"Alabama\",\n                    options: statesList\n                }\n            ],\n        kidInfo: \n            [\n                {\n                    for: \"name\",\n                    label: \"Enter the name of your kid\",\n                    placeholder: \"kid's name\",\n                    value: \"\"\n                },\n                {\n                    for: \"grade\",\n                    label: \"Which grade is your kid in?\",\n                    value: \"1\",\n                    options: gradeLevel\n\n                },\n                {   \n                    for: \"school\",\n                    label: \"Which school does your kid go to?\",\n                    value: \"1\",\n                    options: []\n                }    \n            ],\n        numberOfKid: 1,\n        allKidsInfo: [],\n        formMessage:\n        {\n            message: \"Already Have An Account?\",\n            action: \"Login\",\n            alt: \"login\"\n        },\n        hasError: false,\n        passwordTooShort: false,\n        usernameAlreadyExists: false,\n        emailAlreadyExists: false,\n        addKid: false,\n        addSchool: false,\n        messageSchoolAdded: false\n    };\n\n    componentDidMount() {\n        // retrieves all the schools\n        API.getAllSchools()\n            .then(\n                res => {\n                    console.log(res.data);\n                    let copy = [...this.state.kidInfo];\n                    copy[2].options = res.data;\n                    this.setState({\n                        kidInfo: copy\n                    })\n                }\n            )\n            .catch(err => console.log(err));\n\n        // get the info of the parents already in the database - to check username and email\n        API.searchAllParentsInDB()\n            .then(\n                res => {\n                    console.log(res.data);\n                    // push into an array all the usernames and emails already in the database\n                    for (var i = 0; i < res.data.length; i++) {\n                        this.state.allUsernames.push(res.data[i].userName);\n                        this.state.allEmails.push(res.data[i].email);\n                    }\n                    console.log(this.state.allUsernames);\n                    console.log(this.state.allEmails);\n                }\n            )\n    }\n\n    // function to update the school list once/if a parent has created one\n    updateSchoolList = () => {\n        API.getAllSchools()\n            .then(\n                res => {\n                    console.log(res.data);\n                    let copy = [...this.state.kidInfo];\n                    copy[2].options = res.data;\n                    this.setState({\n                        kidInfo: copy,\n                        addSchool: false,\n                        messageSchoolAdded: true\n                    })\n\n                }\n            )\n            .catch(err => console.log(err));\n    }\n\n    handleInputChangeParent = event => {\n        const value = event.target.value;\n        const key = event.target.getAttribute(\"data-id\")\n        let copy = [...this.state.parentInfo]\n        copy[key].value = value\n        this.setState({\n            parentInfo: copy\n        });\n    }\n\n    handleContinueButtonClick = event => {\n        event.preventDefault();\n\n        // if all the fields have been filled up\n        if (this.state.parentInfo[0].value && this.state.parentInfo[1].value && this.state.parentInfo[2].value && this.state.parentInfo[3].value && this.state.parentInfo[4].value && this.state.parentInfo[5].value) {\n            // if username doesn't already exist in the database\n            if (this.state.allUsernames.indexOf(this.state.parentInfo[0].value) === -1) {\n                // if the email doesn't already exist in the database\n                if (this.state.allEmails.indexOf(this.state.parentInfo[2].value) === -1) {\n                    // display the second part of the form\n                    this.setState({\n                        firstStepRegistration: false\n                    });\n                    console.log(\"parent info: \", this.state.parentInfo);\n                    // if password isn't too short\n                    if (this.state.parentInfo[1].value.length >= 8) {\n                        // display the second part of the form\n                        this.setState({\n                            firstStepRegistration: false\n                        });\n                        console.log(\"parent info: \", this.state.parentInfo);\n                    // if password too short\n                    } else {\n                        // display error message\n                        this.setState({\n                            passwordTooShort: true\n                        });\n                    }\n                // if the email is already present in the database\n                } else {\n                    this.setState({\n                        emailAlreadyExists: true\n                    });\n                }\n            // if username is already present in the database\n            } else {\n                // display error message\n                this.setState({\n                    usernameAlreadyExists: true\n                });\n            }    \n        // if all the fields haven't been filled up\n        } else {\n            // display error message\n            this.setState({\n                hasError: true\n            })\n        }\n    }\n\n    handleInputChangeKid = event => {\n        const value = event.target.value;\n        const key = event.target.getAttribute(\"data-id\")\n        let copy = [...this.state.kidInfo]\n        copy[key].value = value\n        this.setState({\n            kidInfo: copy\n        });\n    }\n\n    handleAddKidButtonClick = event => {\n        event.preventDefault();\n\n        // if the parent clicks the \"add kid\" button after entering info for the first kid, it will proceed\n        if (this.state.kidInfo[0].value && this.state.kidInfo[1].value && this.state.kidInfo[2].value) {\n            // copy the kidInfo\n            let copyKid = [...this.state.kidInfo];\n            // store the current kidInfo into the allKidInfo variable\n            this.state.allKidsInfo.push(\n                {\n                    name: copyKid[0].value,\n                    grade: copyKid[1].value,\n                    schoolId: copyKid[2].value\n                }\n            );\n            // clear the fields for kid form\n            copyKid[0].value = \"\";\n            copyKid[1].value = \"1\";\n            copyKid[2].value = \"1\";\n            // update kidInfo to get empty fields in form, add 1 kid to the counter and \n            // display new registration form for the other kid\n            this.setState({\n                kidInfo: copyKid,\n                numberOfKid: this.state.numberOfKid + 1,\n                addKid: true,\n                messageSchoolAdded: false\n            });\n        // otherwise will get error message that the parent has to fill up the fields\n        } else {\n            this.setState({ \n                hasError: true\n            });\n        }\n    }\n\n    handleSignUpButtonClick = event => {\n        event.preventDefault();\n\n        // if the parent signs up without adding another kid or after adding a the last kid - grab the only (or last) kidInfo here\n        let copyKid = [...this.state.kidInfo];\n        this.state.allKidsInfo.push(\n            {\n                name: copyKid[0].value,\n                grade: copyKid[1].value,\n                schoolId: copyKid[2].value\n            }\n        );\n\n        // console log for checking\n        console.log(\"all kid info: \", this.state.allKidsInfo);\n\n        // the parent has to enter info in every field to be able to submit form\n        if (this.state.kidInfo[0].value && this.state.kidInfo[1].value && this.state.kidInfo[2].value) {\n  \n            API.signup(\n                {\n                    userName: this.state.parentInfo[0].value,\n                    password: this.state.parentInfo[1].value,\n                    email: this.state.parentInfo[2].value,\n                    photoLink: this.state.parentInfo[3].value,\n                    city: this.state.parentInfo[4].value,\n                    state: this.state.parentInfo[5].value,\n                    allKidsInfo: this.state.allKidsInfo\n                }\n            )\n            .then(res => {\n                window.location.reload()\n            })\n            .catch(err => console.log(err))\n        // otherwise will get error message that the parent has to fill up the fields\n        } else {\n\n            this.setState({ \n                hasError: true\n            })\n        }\n    }\n\n    handleAddSchoolOption = event => {\n        event.preventDefault();\n\n        this.setState({\n            addSchool: true,\n            messageSchoolAdded: false\n        })\n\n    }\n\n    handleCloseButtonClick = event => {\n        event.preventDefault();\n\n        this.setState({\n            hasError: false,\n            passwordTooShort: false,\n            usernameAlreadyExists: false,\n            emailAlreadyExists: false\n        })\n    }\n\n    resetError = () => {\n        if (this.state.hasError || this.state.passwordTooShort || this.state.usernameAlreadyExists || this.state.emailAlreadyExists) {\n            setTimeout(() => {\n                this.setState({\n                    hasError: false,\n                    passwordTooShort: false,\n                    usernameAlreadyExists: false,\n                    emailAlreadyExists: false,\n                })\n            }, 2000)\n        }\n    }\n\n\n    render() {\n        this.resetError();\n        return (\n            <div>\n                {(this.state.firstStepRegistration) ? (\n                    <div>\n                        {(this.state.hasError) ? (\n                            <ErrorMessage\n                                message=\"Please fill up all the fields!\"\n                                handleCloseButtonClick={this.handleCloseButtonClick}\n                            />\n                        ) : (\n                            \"\"\n                        )}\n                        {(this.state.passwordTooShort) ? (\n                            <ErrorMessage\n                                message=\"Your password should be at least 8 characters long!\"\n                                handleCloseButtonClick={this.handleCloseButtonClick}\n                            />\n                        ) : (\n                            \"\"\n                        )}\n                        {(this.state.usernameAlreadyExists) ? (\n                            <ErrorMessage\n                                message=\"Sorry, this username is already taken!\"\n                                handleCloseButtonClick={this.handleCloseButtonClick}\n                            />\n                        ) : (\n                            \"\"\n                        )}\n                        {(this.state.emailAlreadyExists) ? (\n                            <ErrorMessage\n                                message=\"Sorry, a parent already registered with this email!\"\n                                handleCloseButtonClick={this.handleCloseButtonClick}\n                            />\n                        ) : (\n                            \"\"\n                        )}\n                        <FormAction>\n                            {this.state.parentInfo.map((parentInfo, i) => {\n                                if (parentInfo.for !== \"state\") {\n                                    return (\n                                        <FormLabel\n                                            key={i}\n                                            data={i}\n                                            for={parentInfo.for}\n                                            label={parentInfo.label}\n                                            placeholder={parentInfo.placeholder}\n                                            value={parentInfo.value}\n                                            handleChange={this.handleInputChangeParent}\n                                        />\n                                    );\n                                } else {\n                                    return (\n                                        <Dropdown\n                                            key={i}\n                                            data={i}\n                                            for={parentInfo.for}\n                                            label={parentInfo.label}\n                                            value={parentInfo.value}\n                                            handleChange={this.handleInputChangeParent}\n                                        >\n                                        {parentInfo.options.map((state, j) => {\n                                            return (\n                                                <OptionForDropdown option={state} value={state} key={j} />\n                                            )\n                                        })}\n                                        </Dropdown>\n                                    );  \n                                }\n                            })}\n                        </FormAction>\n                        <FormButton\n                            nameButton=\"Continue\"\n                            handleButtonClick={this.handleContinueButtonClick}\n                        />\n                    </div>\n                ) : (\n                    <div>\n                        {(this.state.hasError) ? (\n                            <ErrorMessage\n                                message=\"Please fill up all the fields!\"\n                                handleCloseButtonClick={this.handleCloseButtonClick}\n                            />\n                        ) : (\n                            \"\"\n                        )}\n                        <FormAction>\n                            {(!this.state.addKid) ? (\n                                <div>\n                                    <div className=\"font-weight-bold mb-2\">Enter information for kid #1</div>\n                                    {this.state.kidInfo.map((info, i) => {\n                                        if (info.for === \"name\") {\n                                            return (\n                                                <FormLabel\n                                                    key={i}\n                                                    data={i}\n                                                    for={info.for}\n                                                    label={info.label}\n                                                    value={info.value}\n                                                    handleChange={this.handleInputChangeKid}\n                                                />\n                                            )\n                                        } else {\n                                            return (\n                                                <Dropdown\n                                                    key={i}\n                                                    data={i}\n                                                    for={info.for}\n                                                    label={info.label}\n                                                    value={info.value}\n                                                    disabled={this.state.disabled}\n                                                    handleChange={this.handleInputChangeKid}\n                                                >\n                                                    {info.options.map((item, j) => {\n                                                        return (\n                                                            <OptionForDropdown\n                                                                option={item.name}\n                                                                value={item.id}\n                                                                key={j}\n                                                            />\n                                                        )\n                                                    })}\n                                                </Dropdown>\n                                            )\n                                        }\n                                    })}\n                                </div>\n                            ) : (\n                                <div>\n                                    <div className=\"font-weight-bold text-success mb-2\">Information saved for kid #{this.state.numberOfKid - 1}</div>\n                                    <div className=\"font-weight-bold mb-2\"> Enter information for kid #{this.state.numberOfKid}</div>\n                                    {this.state.kidInfo.map((info, i) => {\n                                        if (info.for === \"name\") {\n                                            return (\n                                                <FormLabel\n                                                    key={i}\n                                                    data={i}\n                                                    for={info.for}\n                                                    label={info.label}\n                                                    value={info.value}\n                                                    handleChange={this.handleInputChangeKid}\n                                                />\n                                            )\n                                        } else {\n                                            return (\n                                                <Dropdown\n                                                    key={i}\n                                                    data={i}\n                                                    for={info.for}\n                                                    label={info.label}\n                                                    value={info.value}\n                                                    disabled={this.state.disabled}\n                                                    handleChange={this.handleInputChangeKid}\n                                                >\n                                                    {info.options.map((item, j) => {\n                                                        return (\n                                                            <OptionForDropdown\n                                                                option={item.name}\n                                                                value={item.id}\n                                                                key={j}\n                                                            />\n                                                        )\n                                                    })}\n                                                </Dropdown>\n                                            )\n                                        }\n                                    })}       \n                                </div>\n                            )}\n                            {this.state.messageSchoolAdded ? (\n                                <p className=\"font-weight-bold text-success\">Your school has been added to the dropdown menu!</p>\n                            ) : (\n                                \"\"\n                            )}\n                            <button className=\"mb-2 font-weight-bold p-0\" onClick={this.handleAddSchoolOption} style={{border: \"none\", background: \"none\", color: \"orange\"}}>Didn't find your school? Click here to add it!</button>\n                            {this.state.addSchool ? (\n                                <AddSchool \n                                    toUpdateSchoolList={this.updateSchoolList}\n                                />\n                            ) : (\n                                \"\"\n                            )}\n                            </FormAction>\n                            <hr style={{border: \"1px solid #176d88\"}}></hr>\n                            <FormButton\n                                nameButton=\"I have another kid!\"\n                                handleButtonClick={this.handleAddKidButtonClick}\n                            />\n                            <FormButton\n                                nameButton=\"Sign Up\"\n                                handleButtonClick={this.handleSignUpButtonClick}\n                            />\n                        </div>\n                    )}\n\n                <FormMessage\n                    message={this.state.formMessage.message}\n                    path={this.props.path}\n                    action={this.state.formMessage.action}\n                    id={this.state.formMessage.alt}\n                />\n            </div>\n        );\n    }\n\n}\n\n\n// export the component so it can be used by other files\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}